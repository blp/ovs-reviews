/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import OVN_Northbound as nb
import OVN_Southbound as sb
import ovsdb
import ovn
import lrouter
import multicast
import helpers
import ipam
import vec
import set

function is_enabled(lsp: Intern<nb::Logical_Switch_Port>): bool { is_enabled(lsp.enabled) }
function is_enabled(sp: SwitchPort): bool { sp.lsp.is_enabled() }
function is_enabled(sp: Intern<SwitchPort>): bool { sp.lsp.is_enabled() }

relation SwitchRouterPeerRef(lsp: uuid, rport: Option<Intern<RouterPort>>)

SwitchRouterPeerRef(lsp, Some{rport}) :-
    SwitchRouterPeer(lsp, _, lrp),
    rport in &RouterPort(.lrp = &nb::Logical_Router_Port{._uuid = lrp}).

SwitchRouterPeerRef(lsp, None) :-
    &nb::Logical_Switch_Port(._uuid = lsp),
    not SwitchRouterPeer(lsp, _, _).

/* LogicalSwitchPortCandidate.
 *
 * Each row pairs a logical switch port with its logical switch, but without
 * checking that the logical switch port is on only one logical switch.
 *
 * (Use LogicalSwitchPort instead, which guarantees uniqueness.) */
relation LogicalSwitchPortCandidate(lsp_uuid: uuid, ls_uuid: uuid)
LogicalSwitchPortCandidate(lsp_uuid, ls_uuid) :-
    &nb::Logical_Switch(._uuid = ls_uuid, .ports = ports),
    var lsp_uuid = FlatMap(ports).
Warning[message] :-
    LogicalSwitchPortCandidate(lsp_uuid, ls_uuid),
    var lss = ls_uuid.group_by(lsp_uuid).to_set(),
    lss.size() > 1,
    lsp in &nb::Logical_Switch_Port(._uuid = lsp_uuid),
    var message = "Bad configuration: logical switch port ${lsp.name} belongs "
    "to more than one logical switch".

/* Each row means 'lport' is in 'lswitch' (and only that lswitch). */
relation LogicalSwitchPort(lport: uuid, lswitch: uuid)
LogicalSwitchPort(lsp_uuid, ls_uuid) :-
    LogicalSwitchPortCandidate(lsp_uuid, ls_uuid),
    var lss = ls_uuid.group_by(lsp_uuid).to_set(),
    lss.size() == 1,
    Some{var ls_uuid} = lss.nth(0).

/* Each logical switch port with an "unknown" address (with its logical switch). */
relation LogicalSwitchPortWithUnknownAddress(ls: uuid, lsp: uuid)
LogicalSwitchPortWithUnknownAddress(ls_uuid, lsp_uuid) :-
    LogicalSwitchPort(lsp_uuid, ls_uuid),
    lsp in &nb::Logical_Switch_Port(._uuid = lsp_uuid),
    lsp.is_enabled() and lsp.addresses.contains(i"unknown").

// "Pitfalls of projections" in ddlog-new-feature.rst explains why this
// is an output relation:
output relation LogicalSwitchHasUnknownPorts(ls: uuid, has_unknown: bool)
LogicalSwitchHasUnknownPorts(ls, true) :- LogicalSwitchPortWithUnknownAddress(ls, _).
LogicalSwitchHasUnknownPorts(ls, false) :-
    &nb::Logical_Switch(._uuid = ls),
    not LogicalSwitchPortWithUnknownAddress(ls, _).

/* PortStaticAddresses: static IP addresses associated with each Logical_Switch_Port */
relation PortStaticAddresses(lsport: uuid, ip4addrs: Set<istring>, ip6addrs: Set<istring>)

PortStaticAddresses(.lsport     = port_uuid,
                    .ip4addrs   = ip4_addrs.union().map(intern),
                    .ip6addrs   = ip6_addrs.union().map(intern)) :-
    &nb::Logical_Switch_Port(._uuid = port_uuid, .addresses = addresses),
    var address = FlatMap(if (addresses.is_empty()) { set_singleton(i"") } else { addresses }),
    (var ip4addrs, var ip6addrs) = if (not is_dynamic_lsp_address(address.ival())) {
        split_addresses(address.ival())
    } else { (set_empty(), set_empty()) },
    (var ip4_addrs, var ip6_addrs) = (ip4addrs, ip6addrs).group_by(port_uuid).group_unzip().

relation PortInGroup(port: uuid, group: uuid)

PortInGroup(port, group) :-
    nb::Port_Group(._uuid = group, .ports = ports),
    var port = FlatMap(ports).

/* All ACLs associated with logical switch */
relation LogicalSwitchACL(ls: uuid, acl: uuid)

LogicalSwitchACL(ls, acl) :-
    &nb::Logical_Switch(._uuid = ls, .acls = acls),
    var acl = FlatMap(acls).

LogicalSwitchACL(ls, acl) :-
    &nb::Logical_Switch(._uuid = ls, .ports = ports),
    var port_id = FlatMap(ports),
    PortInGroup(port_id, group_id),
    nb::Port_Group(._uuid = group_id, .acls = acls),
    var acl = FlatMap(acls).

relation LogicalSwitchStatefulACL(ls: uuid, acl: uuid)

LogicalSwitchStatefulACL(ls, acl) :-
    LogicalSwitchACL(ls, acl),
    &nb::ACL(._uuid = acl, .action = i"allow-related").

// "Pitfalls of projections" in ddlog-new-feature.rst explains why this
// is an output relation:
output relation LogicalSwitchHasStatefulACL(ls: uuid, has_stateful_acl: bool)

LogicalSwitchHasStatefulACL(ls, true) :-
    LogicalSwitchStatefulACL(ls, _).

LogicalSwitchHasStatefulACL(ls, false) :-
    &nb::Logical_Switch(._uuid = ls),
    not LogicalSwitchStatefulACL(ls, _).

// "Pitfalls of projections" in ddlog-new-feature.rst explains why this
// is an output relation:
output relation LogicalSwitchHasACLs(ls: uuid, has_acls: bool)

LogicalSwitchHasACLs(ls, true) :-
    LogicalSwitchACL(ls, _).

LogicalSwitchHasACLs(ls, false) :-
    &nb::Logical_Switch(._uuid = ls),
    not LogicalSwitchACL(ls, _).

/*
 * LogicalSwitchLocalnetPorts maps from each logical switch UUID
 * to the logical switch's set of localnet ports.  Each localnet
 * port is expressed as a tuple of its UUID and its name.
 */
relation LogicalSwitchLocalnetPort0(ls_uuid: uuid, lsp: (uuid, istring))
LogicalSwitchLocalnetPort0(ls_uuid, (lsp_uuid, lsp.name)) :-
    ls in &nb::Logical_Switch(._uuid = ls_uuid),
    var lsp_uuid = FlatMap(ls.ports),
    lsp in &nb::Logical_Switch_Port(._uuid = lsp_uuid),
    lsp.__type == i"localnet".

relation LogicalSwitchLocalnetPorts(ls_uuid: uuid, localnet_ports: Vec<(uuid, istring)>)
LogicalSwitchLocalnetPorts(ls_uuid, localnet_ports) :-
    LogicalSwitchLocalnetPort0(ls_uuid, lsp),
    var localnet_ports = lsp.group_by(ls_uuid).to_vec().
LogicalSwitchLocalnetPorts(ls_uuid, vec_empty()) :-
    ls in &nb::Logical_Switch(),
    var ls_uuid = ls._uuid,
    not LogicalSwitchLocalnetPort0(ls_uuid, _).

/* Flatten the list of dns_records in Logical_Switch */
relation LogicalSwitchDNS(ls_uuid: uuid, dns_uuid: uuid)

LogicalSwitchDNS(ls._uuid, dns_uuid) :-
    &nb::Logical_Switch[ls],
    var dns_uuid = FlatMap(ls.dns_records),
    nb::DNS(._uuid = dns_uuid).

relation LogicalSwitchWithDNSRecords(ls: uuid)

LogicalSwitchWithDNSRecords(ls) :-
    LogicalSwitchDNS(ls, dns_uuid),
    nb::DNS(._uuid = dns_uuid, .records = records),
    not records.is_empty().

// "Pitfalls of projections" in ddlog-new-feature.rst explains why this
// is an output relation:
output relation LogicalSwitchHasDNSRecords(ls: uuid, has_dns_records: bool)

LogicalSwitchHasDNSRecords(ls, true) :-
    LogicalSwitchWithDNSRecords(ls).

LogicalSwitchHasDNSRecords(ls, false) :-
    &nb::Logical_Switch(._uuid = ls),
    not LogicalSwitchWithDNSRecords(ls).

relation LogicalSwitchHasNonRouterPort0(ls: uuid)
LogicalSwitchHasNonRouterPort0(ls_uuid) :-
    ls in &nb::Logical_Switch(._uuid = ls_uuid),
    var lsp_uuid = FlatMap(ls.ports),
    lsp in &nb::Logical_Switch_Port(._uuid = lsp_uuid),
    lsp.__type != i"router".

// "Pitfalls of projections" in ddlog-new-feature.rst explains why this
// is an output relation:
output relation LogicalSwitchHasNonRouterPort(ls: uuid, has_non_router_port: bool)
LogicalSwitchHasNonRouterPort(ls, true) :-
    LogicalSwitchHasNonRouterPort0(ls).
LogicalSwitchHasNonRouterPort(ls, false) :-
    &nb::Logical_Switch(._uuid = ls),
    not LogicalSwitchHasNonRouterPort0(ls).

// LogicalSwitchCopp maps from each LS to its collection of Copp meters,
// dropping any Copp meter whose meter name doesn't exist.
relation LogicalSwitchCopp(ls: uuid, meters: Map<istring,istring>)
LogicalSwitchCopp(ls, meters) :- LogicalSwitchCopp0(ls, meters).
LogicalSwitchCopp(ls, map_empty()) :-
    &nb::Logical_Switch(._uuid = ls),
    not LogicalSwitchCopp0(ls, _).

relation LogicalSwitchCopp0(ls: uuid, meters: Map<istring,istring>)
LogicalSwitchCopp0(ls, meters) :-
    &nb::Logical_Switch(._uuid = ls, .copp = Some{copp_uuid}),
    nb::Copp(._uuid = copp_uuid, .meters = meters),
    var entry = FlatMap(meters),
    (var copp_id, var meter_name) = entry,
    &nb::Meter(.name = meter_name),
    var meters = (copp_id, meter_name).group_by(ls).to_map().

/* Switch relation collects all attributes of a logical switch */

typedef Switch = Switch {
    /* Fields copied from nb::Logical_Switch_Port. */
    _uuid:             uuid,
    name:              istring,
    other_config:      Map<istring,istring>,
    external_ids:      Map<istring,istring>,

    /* Additional computed fields. */
    has_stateful_acl:  bool,
    has_acls:          bool,
    has_lb_vip:        bool,
    has_dns_records:   bool,
    has_unknown_ports: bool,
    localnet_ports:    Vec<(uuid, istring)>,  // UUID and name of each localnet port.
    subnet:            Option<(in_addr/*subnet*/, in_addr/*mask*/, bit<32>/*start_ipv4*/, bit<32>/*total_ipv4s*/)>,
    ipv6_prefix:       Option<in6_addr>,
    mcast_cfg:         Intern<McastSwitchCfg>,
    is_vlan_transparent: bool,
    copp:              Map<istring, istring>,

    /* Does this switch have at least one port with type != "router"? */
    has_non_router_port: bool
}


relation Switch[Intern<Switch>]

function ipv6_parse_prefix(s: string): Option<in6_addr> {
    if (string_contains(s, "/")) {
        match (ipv6_parse_cidr(s)) {
            Right{(addr, 64)} -> Some{addr},
            _ -> None
        }
    } else {
        ipv6_parse(s)
    }
}

Switch[Switch{
           ._uuid             = ls._uuid,
           .name              = ls.name,
           .other_config      = ls.other_config,
           .external_ids      = ls.external_ids,

           .has_stateful_acl  = has_stateful_acl,
           .has_acls          = has_acls,
           .has_lb_vip        = has_lb_vip,
           .has_dns_records   = has_dns_records,
           .has_unknown_ports = has_unknown_ports,
           .localnet_ports    = localnet_ports,
           .subnet            = subnet,
           .ipv6_prefix       = ipv6_prefix,
           .mcast_cfg         = mcast_cfg,
           .has_non_router_port = has_non_router_port,
           .copp              = copp,
           .is_vlan_transparent = is_vlan_transparent
       }.intern()] :-
    &nb::Logical_Switch[ls],
    LogicalSwitchHasStatefulACL(ls._uuid, has_stateful_acl),
    LogicalSwitchHasACLs(ls._uuid, has_acls),
    LogicalSwitchHasLBVIP(ls._uuid, has_lb_vip),
    LogicalSwitchHasDNSRecords(ls._uuid, has_dns_records),
    LogicalSwitchHasUnknownPorts(ls._uuid, has_unknown_ports),
    LogicalSwitchLocalnetPorts(ls._uuid, localnet_ports),
    LogicalSwitchHasNonRouterPort(ls._uuid, has_non_router_port),
    LogicalSwitchCopp(ls._uuid, copp),
    mcast_cfg in &McastSwitchCfg(.datapath = ls._uuid),
    var subnet =
        match (ls.other_config.get(i"subnet")) {
            None -> None,
            Some{subnet_str} -> {
                match (ip_parse_masked(subnet_str.ival())) {
                    Left{err} -> {
                        warn("bad 'subnet' ${subnet_str}");
                        None
                    },
                    Right{(subnet, mask)} -> {
                        if (mask.cidr_bits() == Some{32} or not mask.is_cidr()) {
                            warn("bad 'subnet' ${subnet_str}");
                            None
                        } else {
                            Some{(subnet, mask, (subnet.a & mask.a) + 1, ~mask.a)}
                        }
                    }
                }
            }
        },
    var ipv6_prefix =
        match (ls.other_config.get(i"ipv6_prefix")) {
            None -> None,
            Some{prefix} -> ipv6_parse_prefix(prefix.ival())
        },
    var is_vlan_transparent = ls.other_config.get_bool_def(i"vlan-passthru", false).

/* LogicalSwitchLB: many-to-many relation between logical switches and nb::LB */
relation LogicalSwitchLB(sw_uuid: uuid, lb: Intern<nb::Load_Balancer>)
LogicalSwitchLB(sw_uuid, lb) :-
    &nb::Logical_Switch(._uuid = sw_uuid, .load_balancer = lb_ids),
    var lb_id = FlatMap(lb_ids),
    lb in &nb::Load_Balancer(._uuid = lb_id).


relation SwitchLB(sw: Intern<Switch>, lb_uuid: uuid)

SwitchLB(sw, lb._uuid) :-
    LogicalSwitchLB(sw_uuid, lb),
    sw in &Switch(._uuid = sw_uuid).

/* Load balancer VIPs associated with switch */
relation SwitchLBVIP(sw_uuid: uuid, lb: Intern<nb::Load_Balancer>, vip: istring, backends: istring)
SwitchLBVIP(sw_uuid, lb, vip, backends) :-
    LogicalSwitchLB(sw_uuid, lb@(&nb::Load_Balancer{.vips = vips})),
    var kv = FlatMap(vips),
    (var vip, var backends) = kv.

// "Pitfalls of projections" in ddlog-new-feature.rst explains why this
// is an output relation:
output relation LogicalSwitchHasLBVIP(sw_uuid: uuid, has_lb_vip: bool)
LogicalSwitchHasLBVIP(sw_uuid, true) :-
    SwitchLBVIP(.sw_uuid = sw_uuid).
LogicalSwitchHasLBVIP(sw_uuid, false) :-
    &nb::Logical_Switch(._uuid = sw_uuid),
    not SwitchLBVIP(.sw_uuid = sw_uuid).

/* Load balancer virtual IPs.
 *
 * Three levels:
 *   - LBVIP0 is load balancer virtual IPs with health checks.
 *   - LBVIP1 also includes virtual IPs without health checks.
 *   - LBVIP parses the IP address and port (and drops VIPs where those are invalid).
 */
relation LBVIP0(
    lb: Intern<nb::Load_Balancer>,
    vip_key: istring,
    backend_ips: istring,
    health_check: Intern<nb::Load_Balancer_Health_Check>)
LBVIP0(lb, vip_key, backend_ips, health_check) :-
    lb in &nb::Load_Balancer(),
    var vip = FlatMap(lb.vips),
    (var vip_key, var backend_ips) = vip,
    health_check in &nb::Load_Balancer_Health_Check(.vip = vip_key),
    lb.health_check.contains(health_check._uuid).

relation LBVIP1(
    lb: Intern<nb::Load_Balancer>,
    vip_key: istring,
    backend_ips: istring,
    health_check: Option<Intern<nb::Load_Balancer_Health_Check>>)
LBVIP1(lb, vip_key, backend_ips, Some{health_check}) :-
    LBVIP0(lb, vip_key, backend_ips, health_check).
LBVIP1(lb, vip_key, backend_ips, None) :-
    lb in &nb::Load_Balancer(),
    var vip = FlatMap(lb.vips),
    (var vip_key, var backend_ips) = vip,
    not LBVIP0(lb, vip_key, backend_ips, _).

typedef LBVIP = LBVIP {
    lb: Intern<nb::Load_Balancer>,
    vip_key: istring,
    backend_ips: istring,
    health_check: Option<Intern<nb::Load_Balancer_Health_Check>>,
    vip_addr: v46_ip,
    vip_port: bit<16>,
    backends: Vec<lb_vip_backend>
}

relation LBVIP[Intern<LBVIP>]

LBVIP[LBVIP{lb, vip_key, backend_ips, health_check, vip_addr, vip_port, backends}.intern()] :-
    LBVIP1(lb, vip_key, backend_ips, health_check),
    Some{(var vip_addr, var vip_port)} = ip_address_and_port_from_lb_key(vip_key.ival()),
    var backends = backend_ips.split(",").filter_map(
        |ip| parse_vip_backend(ip, lb.ip_port_mappings)).

typedef svc_monitor = SvcMonitor{
    port_name: istring,          // Might name a switch or router port.
    src_ip: istring
}

/* Backends for load balancer virtual IPs.
 *
 * Use caution with this table, because load balancer virtual IPs
 * sometimes have no backends and there is some significance to that.
 * In cases that are really per-LBVIP, instead of per-LBVIPBackend,
 * process the LBVIPs directly. */
typedef lb_vip_backend = LBVIPBackend{
    ip: v46_ip,
    port: bit<16>,
    svc_monitor: Option<svc_monitor>}

function parse_vip_backend(backend_ip: string,
                           mappings: Map<istring,istring>): Option<lb_vip_backend> {
    match (ip_address_and_port_from_lb_key(backend_ip)) {
        Some{(ip, port)} -> Some{LBVIPBackend{ip, port, parse_ip_port_mapping(mappings, ip)}},
        _ -> None
    }
}

function parse_ip_port_mapping(mappings: Map<istring,istring>, ip: v46_ip)
    : Option<svc_monitor> {
    for ((key, value) in mappings) {
        if (ip46_parse(key.ival()) == Some{ip}) {
            var strs = value.split(":");
            if (strs.len() != 2) {
                return None
            };

            return match ((strs.nth(0), strs.nth(1))) {
                (Some{port_name}, Some{src_ip}) -> Some{SvcMonitor{port_name.intern(), src_ip.intern()}},
                _ -> None
            }
        }
    };
    return None
}

function is_online(status: Option<istring>): bool = {
    match (status) {
        Some{s} -> s == i"online",
        _ -> true
    }
}
function default_protocol(protocol: Option<istring>): istring = {
    match (protocol) {
        Some{x} -> x,
        None -> i"tcp"
    }
}

relation LBVIPWithStatus(
    lbvip: Intern<LBVIP>,
    up_backends: istring)
LBVIPWithStatus(lbvip, i"") :-
    lbvip in &LBVIP(.backends = vec_empty()).
LBVIPWithStatus(lbvip, up_backends) :-
    LBVIPBackendStatus(lbvip, backend, up),
    var up_backends = ((backend, up)).group_by(lbvip).to_vec().filter_map(|x| {
        (LBVIPBackend{var ip, var port, _}, var up) = x;
        match ((up, port)) {
            (true, 0) -> Some{"${ip.to_bracketed_string()}"},
            (true, _) -> Some{"${ip.to_bracketed_string()}:${port}"},
            _ -> None
        }
    }).join(",").intern().

/* Maps from a load-balancer virtual IP backend to whether it's up or not.
 *
 * Only some backends have health checking enabled. The ones that don't
 * are always considered to be up. */
relation LBVIPBackendStatus0(
    lbvip: Intern<LBVIP>,
    backend: lb_vip_backend,
    up: bool)
LBVIPBackendStatus0(lbvip, backend, is_online(sm.status)) :-
    LBVIP[lbvip@&LBVIP{.lb = lb}],
    var backend = FlatMap(lbvip.backends),
    Some{var svc_monitor} = backend.svc_monitor,
    sm in &sb::Service_Monitor(.port = backend.port as integer),
    ip46_parse(sm.ip.ival()) == Some{backend.ip},
    svc_monitor.port_name == sm.logical_port,
    default_protocol(lb.protocol) == default_protocol(sm.protocol).

relation LBVIPBackendStatus(
    lbvip: Intern<LBVIP>,
    backend: lb_vip_backend,
    up: bool)
LBVIPBackendStatus(lbvip, backend, up) :- LBVIPBackendStatus0(lbvip, backend, up).
LBVIPBackendStatus(lbvip, backend, true) :-
    LBVIP[lbvip@&LBVIP{.lb = lb}],
    var backend = FlatMap(lbvip.backends),
    not LBVIPBackendStatus0(lbvip, backend, _).

/* SwitchPortDHCPv4Options: many-to-one relation between logical switches and DHCPv4 options */
relation SwitchPortDHCPv4Options(
    port: Intern<SwitchPort>,
    dhcpv4_options: Intern<nb::DHCP_Options>)

SwitchPortDHCPv4Options(port, options) :-
    port in &SwitchPort(.lsp = lsp),
    port.lsp.__type != i"external",
    Some{var dhcpv4_uuid} = lsp.dhcpv4_options,
    options in &nb::DHCP_Options(._uuid = dhcpv4_uuid).

/* SwitchPortDHCPv6Options: many-to-one relation between logical switches and DHCPv4 options */
relation SwitchPortDHCPv6Options(
    port: Intern<SwitchPort>,
    dhcpv6_options: Intern<nb::DHCP_Options>)

SwitchPortDHCPv6Options(port, options) :-
    port in &SwitchPort(.lsp = lsp),
    port.lsp.__type != i"external",
    Some{var dhcpv6_uuid} = lsp.dhcpv6_options,
    options in &nb::DHCP_Options(._uuid = dhcpv6_uuid).

/* SwitchQoS: many-to-one relation between logical switches and nb::QoS */
relation SwitchQoS(sw: Intern<Switch>, qos: Intern<nb::QoS>)

SwitchQoS(sw, qos) :-
    sw in &Switch(),
    &nb::Logical_Switch(._uuid = sw._uuid, .qos_rules = qos_rules),
    var qos_rule = FlatMap(qos_rules),
    qos in &nb::QoS(._uuid = qos_rule).

/* Reports whether a given ACL is associated with a fair meter.
 * 'has_fair_meter' is false if 'acl' has no meter, or if has a meter
 * that isn't a fair meter.  (The latter case has two subcases: the
 * case where the meter that the ACL names corresponds to an nb::Meter
 * with that name, and the case where it doesn't.) */
relation ACLHasFairMeter(acl: Intern<nb::ACL>, has_fair_meter: bool)
ACLHasFairMeter(acl, true) :-
    ACLWithFairMeter(acl, _).
ACLHasFairMeter(acl, false) :-
    acl in &nb::ACL(),
    not ACLWithFairMeter(acl, _).

/* All the ACLs associated with a fair meter, with their fair meters. */
relation ACLWithFairMeter(acl: Intern<nb::ACL>, meter: Intern<nb::Meter>)
ACLWithFairMeter(acl, meter) :-
    acl in &nb::ACL(.meter = Some{meter_name}),
    meter in &nb::Meter(.name = meter_name, .fair = Some{true}).

/* SwitchACL: many-to-many relation between logical switches and ACLs */
relation &SwitchACL(sw: Intern<Switch>,
                    acl: Intern<nb::ACL>,
                    has_fair_meter: bool)

&SwitchACL(.sw = sw, .acl = acl, .has_fair_meter = has_fair_meter) :-
    LogicalSwitchACL(sw_uuid, acl_uuid),
    sw in &Switch(._uuid = sw_uuid),
    acl in &nb::ACL(._uuid = acl_uuid),
    ACLHasFairMeter(acl, has_fair_meter).

function oVN_FEATURE_PORT_UP_NOTIF(): istring { i"port-up-notif" }
relation SwitchPortUp0(lsp: uuid)
SwitchPortUp0(lsp) :-
    &nb::Logical_Switch_Port(._uuid = lsp, .__type = i"router").
SwitchPortUp0(lsp) :-
    &nb::Logical_Switch_Port(._uuid = lsp, .name = lsp_name, .__type = __type),
    sb::Port_Binding(.logical_port = lsp_name, .up = up, .chassis = Some{chassis_uuid}),
    sb::Chassis(._uuid = chassis_uuid, .other_config = other_config),
    if (other_config.get_bool_def(oVN_FEATURE_PORT_UP_NOTIF(), false)) {
        up == Some{true}
    } else {
        true
    }.

relation SwitchPortUp(lsp: uuid, up: bool)
SwitchPortUp(lsp, true) :- SwitchPortUp0(lsp).
SwitchPortUp(lsp, false) :- &nb::Logical_Switch_Port(._uuid = lsp), not SwitchPortUp0(lsp).

relation SwitchPortHAChassisGroup0(lsp_uuid: uuid, hac_group_uuid: uuid)
SwitchPortHAChassisGroup0(lsp_uuid, ha_chassis_group_uuid(ls_uuid)) :-
    lsp in &nb::Logical_Switch_Port(._uuid = lsp_uuid),
    lsp.__type == i"external",
    Some{var hac_group_uuid} = lsp.ha_chassis_group,
    ha_chassis_group in nb::HA_Chassis_Group(._uuid = hac_group_uuid),
    /* If the group is empty, then HA_Chassis_Group record will not be created in SB,
     * and so we should not create a reference to the group in Port_Binding table,
     * to avoid integrity violation. */
    not ha_chassis_group.ha_chassis.is_empty(),
    LogicalSwitchPort(.lport = lsp_uuid, .lswitch = ls_uuid).
relation SwitchPortHAChassisGroup(lsp_uuid: uuid, hac_group_uuid: Option<uuid>)
SwitchPortHAChassisGroup(lsp_uuid, Some{hac_group_uuid}) :-
    SwitchPortHAChassisGroup0(lsp_uuid, hac_group_uuid).
SwitchPortHAChassisGroup(lsp_uuid, None) :-
    lsp in &nb::Logical_Switch_Port(._uuid = lsp_uuid),
    not SwitchPortHAChassisGroup0(lsp_uuid, _).

/* SwitchPort relation collects all attributes of a logical switch port
 * - `peer` - peer router port, if any
 * - `static_dynamic_mac` - port has a "dynamic" address that contains a static MAC,
 *    e.g., "80:fa:5b:06:72:b7 dynamic"
 * - `static_dynamic_ipv4`, `static_dynamic_ipv6` - port has a "dynamic" address that contains a static IP,
 *    e.g., "dynamic 192.168.1.2"
 * - `needs_dynamic_ipv4address` - port requires a dynamically allocated IPv4 address
 * - `needs_dynamic_macaddress`  - port requires a dynamically allocated MAC address
 * - `needs_dynamic_tag`         - port requires a dynamically allocated tag
 * - `up`                        - true if the port is bound to a chassis or has type ""
 * - 'hac_group_uuid'            - uuid of sb::HA_Chassis_Group, only for "external" ports
 */
typedef SwitchPort = SwitchPort {
    lsp:                        Intern<nb::Logical_Switch_Port>,
    json_name:                  istring,
    sw:                         Intern<Switch>,
    peer:                       Option<Intern<RouterPort>>,
    static_addresses:           Vec<lport_addresses>,
    dynamic_address:            Option<lport_addresses>,
    static_dynamic_mac:         Option<eth_addr>,
    static_dynamic_ipv4:        Option<in_addr>,
    static_dynamic_ipv6:        Option<in6_addr>,
    ps_addresses:               Vec<lport_addresses>,
    ps_eth_addresses:           Vec<istring>,
    parent_name:                Option<istring>,
    needs_dynamic_ipv4address:  bool,
    needs_dynamic_macaddress:   bool,
    needs_dynamic_ipv6address:  bool,
    needs_dynamic_tag:          bool,
    up:                         bool,
    mcast_cfg:                  Intern<McastPortCfg>,
    hac_group_uuid:             Option<uuid>
}

relation SwitchPort[Intern<SwitchPort>]

SwitchPort[SwitchPort{
              .lsp                        = lsp,
              .json_name                  = lsp.name.json_escape().intern(),
              .sw                         = sw,
              .peer                       = peer,
              .static_addresses           = static_addresses,
              .dynamic_address            = dynamic_address,
              .static_dynamic_mac         = static_dynamic_mac,
              .static_dynamic_ipv4        = static_dynamic_ipv4,
              .static_dynamic_ipv6        = static_dynamic_ipv6,
              .ps_addresses               = ps_addresses,
              .ps_eth_addresses           = ps_eth_addresses,
              .parent_name                = parent_name,
              .needs_dynamic_ipv4address  = needs_dynamic_ipv4address,
              .needs_dynamic_macaddress   = needs_dynamic_macaddress,
              .needs_dynamic_ipv6address  = needs_dynamic_ipv6address,
              .needs_dynamic_tag          = needs_dynamic_tag,
              .up                         = up,
              .mcast_cfg                  = mcast_cfg,
              .hac_group_uuid             = hac_group_uuid
           }.intern()] :-
    lsp in &nb::Logical_Switch_Port(),
    LogicalSwitchPort(lsp._uuid, lswitch_uuid),
    sw in &Switch(._uuid = lswitch_uuid,
                  .other_config = other_config,
                  .subnet = subnet,
                  .ipv6_prefix = ipv6_prefix),
    SwitchRouterPeerRef(lsp._uuid, peer),
    SwitchPortUp(lsp._uuid, up),
    mcast_cfg in &McastPortCfg(.port = lsp._uuid, .router_port = false),
    var static_addresses = {
        var static_addresses = vec_empty();
        for (addr in lsp.addresses) {
            if ((addr != i"router") and (not is_dynamic_lsp_address(addr.ival()))) {
                match (extract_lsp_addresses(addr.ival())) {
                    None -> (),
                    Some{lport_addr} -> static_addresses.push(lport_addr)
                }
            } else ()
        };
        static_addresses
    },
    var ps_addresses = {
        var ps_addresses = vec_empty();
        for (addr in lsp.port_security) {
            match (extract_lsp_addresses(addr.ival())) {
                None -> (),
                Some{lport_addr} -> ps_addresses.push(lport_addr)
            }
        };
        ps_addresses
    },
    var ps_eth_addresses = {
        var ps_eth_addresses = vec_empty();
        for (ps_addr in ps_addresses) {
            ps_eth_addresses.push(i"${ps_addr.ea}")
        };
        ps_eth_addresses
    },
    var dynamic_address = match (lsp.dynamic_addresses) {
        None -> None,
        Some{lport_addr} -> extract_lsp_addresses(lport_addr.ival())
    },
    (var static_dynamic_mac,
     var static_dynamic_ipv4,
     var static_dynamic_ipv6,
     var has_dyn_lsp_addr) = {
        var dynamic_address_request = None;
        for (addr in lsp.addresses) {
            dynamic_address_request = parse_dynamic_address_request(addr.ival());
            if (dynamic_address_request.is_some()) {
                break
            }
        };

        match (dynamic_address_request) {
            Some{DynamicAddressRequest{mac, ipv4, ipv6}} -> (mac, ipv4, ipv6, true),
            None -> (None, None, None, false)
        }
    },
    var needs_dynamic_ipv4address = has_dyn_lsp_addr and peer == None and subnet.is_some() and
                                    static_dynamic_ipv4 == None,
    var needs_dynamic_macaddress = has_dyn_lsp_addr and peer == None and static_dynamic_mac == None and
                                   (subnet.is_some() or ipv6_prefix.is_some() or
                                    other_config.get(i"mac_only") == Some{i"true"}),
    var needs_dynamic_ipv6address = has_dyn_lsp_addr and peer == None and ipv6_prefix.is_some() and static_dynamic_ipv6 == None,
    var parent_name = match (lsp.parent_name) {
        None -> None,
        Some{pname} -> if (pname == i"") { None } else { Some{pname} }
    },
    /* Port needs dynamic tag if it has a parent and its `tag_request` is 0. */
    var needs_dynamic_tag = parent_name.is_some() and lsp.tag_request == Some{0},
    SwitchPortHAChassisGroup(.lsp_uuid = lsp._uuid,
                             .hac_group_uuid = hac_group_uuid).

/* Switch port port security addresses */
relation SwitchPortPSAddresses(port:     Intern<SwitchPort>,
                               ps_addrs: lport_addresses)

SwitchPortPSAddresses(port, ps_addrs) :-
    port in &SwitchPort(.ps_addresses = ps_addresses),
    var ps_addrs = FlatMap(ps_addresses).

/* All static addresses associated with a port parsed into
 * the lport_addresses data structure */
relation SwitchPortStaticAddresses(port: Intern<SwitchPort>,
                                   addrs:  lport_addresses)
SwitchPortStaticAddresses(port, addrs) :-
    port in &SwitchPort(.static_addresses = static_addresses),
    var addrs = FlatMap(static_addresses).

/* All static and dynamic addresses associated with a port parsed into
 * the lport_addresses data structure */
relation SwitchPortAddresses(port: Intern<SwitchPort>,
                             addrs:  lport_addresses)

SwitchPortAddresses(port, addrs) :- SwitchPortStaticAddresses(port, addrs).

SwitchPortAddresses(port, dynamic_address) :-
    SwitchPortNewDynamicAddress(port, Some{dynamic_address}).

/* "router" is a special Logical_Switch_Port address value that indicates that the Ethernet, IPv4, and IPv6
 * this port should be obtained from the connected logical router port, as specified by router-port in
 * options.
 *
 * The resulting addresses are used to populate the logical switch’s destination lookup, and also for the
 * logical switch to generate ARP and ND replies.
 *
 * If the connected logical router port is a distributed gateway port and the logical router has rules
 * specified in nat with external_mac, then those addresses are also used to populate the switch’s destination
 * lookup. */
SwitchPortAddresses(port, addrs) :-
    port in &SwitchPort(.lsp = lsp, .peer = Some{&rport}),
    Some{var addrs} = {
        var opt_addrs = None;
        for (addr in lsp.addresses) {
            if (addr == i"router") {
                opt_addrs = Some{rport.networks}
            } else ()
        };
        opt_addrs
    }.

/* All static and dynamic IPv4 addresses associated with a port */
relation SwitchPortIPv4Address(port: Intern<SwitchPort>,
                               ea:     eth_addr,
                               addr:   ipv4_netaddr)

SwitchPortIPv4Address(port, ea, addr) :-
    SwitchPortAddresses(port, LPortAddress{.ea = ea, .ipv4_addrs = addrs}),
    var addr = FlatMap(addrs).

/* All static and dynamic IPv6 addresses associated with a port */
relation SwitchPortIPv6Address(port:   Intern<SwitchPort>,
                               ea:     eth_addr,
                               addr:   ipv6_netaddr)

SwitchPortIPv6Address(port, ea, addr) :-
    SwitchPortAddresses(port, LPortAddress{.ea = ea, .ipv6_addrs = addrs}),
    var addr = FlatMap(addrs).

/* Service monitoring. */

/* MAC allocated for service monitor usage. Just one mac is allocated
 * for this purpose and ovn-controller's on each chassis will make use
 * of this mac when sending out the packets to monitor the services
 * defined in Service_Monitor Southbound table. Since these packets
 * all locally handled, having just one mac is good enough. */
function get_svc_monitor_mac(options: Map<istring,istring>, uuid: uuid)
    : eth_addr =
{
    var existing_mac = match (
        options.get(i"svc_monitor_mac"))
    {
        Some{mac} -> scan_eth_addr(mac.ival()),
        None -> None
    };
    match (existing_mac) {
        Some{mac} -> mac,
        None -> eth_addr_pseudorandom(uuid, 'h5678)
    }
}
function put_svc_monitor_mac(options: mut Map<istring,istring>,
                             svc_monitor_mac: eth_addr)
{
    options.insert(i"svc_monitor_mac", svc_monitor_mac.to_string().intern());
}
relation SvcMonitorMac(mac: eth_addr)
SvcMonitorMac(get_svc_monitor_mac(options, uuid)) :-
    nb::NB_Global(._uuid = uuid, .options = options).

relation UseCtInvMatch[bool]
UseCtInvMatch[options.get_bool_def(i"use_ct_inv_match", true)] :-
    nb::NB_Global(.options = options).
UseCtInvMatch[true] :-
    Unit(),
    not nb in nb::NB_Global().
