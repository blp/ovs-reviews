/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import OVN_Northbound as nb
import OVN_Southbound as sb
import ovsdb
import ovn


output relation Warning[string]

/* Switch-to-router logical port connections */
relation SwitchRouterPeer(lsp: uuid, lsp_name: istring, lrp: uuid)
SwitchRouterPeer(lsp, lsp_name, lrp) :-
    &nb::Logical_Switch_Port(._uuid = lsp, .name = lsp_name, .__type = i"router", .options = options),
    Some{var router_port} = options.get(i"router-port"),
    &nb::Logical_Router_Port(.name = router_port, ._uuid = lrp).

function get_bool_def(m: Map<istring, istring>, k: istring, def: bool): bool = {
    m.get(k)
     .and_then(|x| match (x.to_lowercase()) {
                       "false" -> Some{false},
                       "true" -> Some{true},
                       _ -> None
                   })
     .unwrap_or(def)
}

function get_int_def(m: Map<istring, istring>, k: istring, def: integer): integer = {
    m.get(k).and_then(|v| v.ival().parse_dec_u64()).unwrap_or(def)
}

function clamp(x: 'A, range: ('A, 'A)): 'A {
    (var min, var max) = range;
    if (x < min) {
        min
    } else if (x > max) {
        max
    } else {
        x
    }
}

function ha_chassis_group_uuid(uuid: uuid): uuid { hash128("hacg" ++ uuid) }
function ha_chassis_uuid(chassis_name: string, nb_chassis_uuid: uuid): uuid { hash128("hac" ++ chassis_name ++ nb_chassis_uuid) }

/* Dummy relation with one empty row, useful for putting into antijoins. */
relation Unit()
Unit().
