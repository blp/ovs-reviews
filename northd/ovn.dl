/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import ovsdb
import bitwise

/* Logical port is enabled if it does not have an enabled flag or the flag is true */
function is_enabled(s: Option<bool>): bool = {
    s != Some{false}
}

/*
 * Ethernet addresses
 */
typedef eth_addr = EthAddr {
    ha: bit<48>                 // In host byte order, e.g. ha[40] is the multicast bit.
}

function to_string(addr: eth_addr): string {
    eth_addr2string(addr)
}
extern function eth_addr_from_string(s: string): Option<eth_addr>
extern function scan_eth_addr(s: string): Option<eth_addr>
extern function scan_eth_addr_prefix(s: string): Option<eth_addr>
function eth_addr_zero(): eth_addr { EthAddr{0} }
function eth_addr_pseudorandom(seed: uuid, variant: bit<16>) : eth_addr {
    EthAddr{hash64(seed ++ variant) as bit<48>}.mark_random()
}
function mark_random(ea: eth_addr): eth_addr { EthAddr{ea.ha & ~(1 << 40) | (1 << 41)} }

function to_eui64(ea: eth_addr): bit<64> {
    var ha = ea.ha as u64;
    (((ha & 64'hffffff000000) << 16) | 64'hfffe000000 | (ha & 64'hffffff)) ^ (1 << 57)
}

extern function eth_addr2string(addr: eth_addr): string

/*
 * IPv4 addresses
 */

typedef in_addr = InAddr {
    a: bit<32>                  // In host byte order.
}

extern function ip_parse(s: string): Option<in_addr>
extern function ip_parse_masked(s: string): Either<string/*err*/, (in_addr/*host_ip*/, in_addr/*mask*/)>
extern function ip_parse_cidr(s: string): Either<string/*err*/, (in_addr/*ip*/, bit<32>/*plen*/)>
extern function scan_static_dynamic_ip(s: string): Option<in_addr>
function ip_create_mask(plen: bit<32>): in_addr { InAddr{(64'hffffffff << (32 - plen))[31:0]} }

function to_string(ip: in_addr): string = {
    "${ip.a >> 24}.${(ip.a >> 16) & 'hff}.${(ip.a >> 8) & 'hff}.${ip.a & 'hff}"
}

function is_cidr(netmask: in_addr): bool { var x = ~netmask.a; (x & (x + 1)) == 0 }
function is_local_multicast(ip: in_addr): bool { (ip.a & 32'hffffff00) == 32'he0000000 }
function is_zero(a: in_addr): bool { a.a == 0 }
function is_all_ones(a: in_addr): bool { a.a == 32'hffffffff }
function cidr_bits(ip: in_addr): Option<bit<8>> {
    if (ip.is_cidr()) {
        Some{32 - ip.a.trailing_zeros() as u8}
    } else {
        None
    }
}

function network(addr: in_addr, mask: in_addr): in_addr { InAddr{addr.a & mask.a} }
function host(addr: in_addr, mask: in_addr): in_addr { InAddr{addr.a & ~mask.a} }
function bcast(addr: in_addr, mask: in_addr): in_addr { InAddr{addr.a | ~mask.a} }

/* True if both 'ips' are in the same network as defined by netmask 'mask',
 * false otherwise. */
function same_network(ips: (in_addr, in_addr), mask: in_addr): bool {
    ((ips.0.a ^ ips.1.a) & mask.a) == 0
}

/*
 * parse IPv4 address list of the form:
 * "10.0.0.4 10.0.0.10 10.0.0.20..10.0.0.50 10.0.0.100..10.0.0.110"
 */
extern function parse_ip_list(ips: string): Either<string, Vec<(in_addr, Option<in_addr>)>>

/*
 * IPv6 addresses
 */
typedef in6_addr = In6Addr {
    aaaa: bit<128>              // In host byte order.
}

extern function ipv6_parse(s: string): Option<in6_addr>
extern function ipv6_parse_masked(s: string): Either<string/*err*/, (in6_addr/*ip*/, in6_addr/*mask*/)>
extern function ipv6_parse_cidr(s: string): Either<string/*err*/, (in6_addr/*ip*/, bit<32>/*plen*/)>

// Return IPv6 link local address for the given 'ea'.
function to_ipv6_lla(ea: eth_addr): in6_addr {
    In6Addr{(128'hfe80 << 112) | (ea.to_eui64() as u128)}
}

// Returns IPv6 EUI64 address for 'ea' with the given 'prefix'.
function to_ipv6_eui64(ea: eth_addr, prefix: in6_addr): in6_addr {
    In6Addr{(prefix.aaaa & ~128'hffffffffffffffff) | (ea.to_eui64() as u128)}
}

function ipv6_create_mask(plen: bit<32>): in6_addr {
    if (plen == 0) {
        In6Addr{0}
    } else {
        var shift = max(0, 128 - plen);
        In6Addr{128'hffffffffffffffffffffffffffffffff << shift}
    }
}

function is_zero(a: in6_addr): bool { a.aaaa == 0 }
function is_all_ones(a: in6_addr): bool { a.aaaa == 128'hffffffffffffffffffffffffffffffff }
function is_lla(a: in6_addr): bool { (a.aaaa >> 64) == 128'hfe80000000000000 }
function is_all_hosts(a: in6_addr): bool { a.aaaa == 128'hff020000000000000000000000000001 }
function is_cidr(netmask: in6_addr): bool { var x = ~netmask.aaaa; (x & (x + 1)) == 0 }
function is_multicast(a: in6_addr): bool { (a.aaaa >> 120) == 128'hff }
function is_routable_multicast(a: in6_addr): bool {
    a.is_multicast() and match ((a.aaaa >> 112) as u8 & 8'hf) {
        0 -> false,
        1 -> false,
        2 -> false,
        3 -> false,
        15 -> false,
        _ -> true
    }
}

extern function string_mapped(addr: in6_addr): string

function network(addr: in6_addr, mask: in6_addr): in6_addr { In6Addr{addr.aaaa & mask.aaaa} }
function host(addr: in6_addr, mask: in6_addr): in6_addr { In6Addr{addr.aaaa & ~mask.aaaa} }
function solicited_node(ip6: in6_addr): in6_addr {
    In6Addr{(ip6.aaaa & 128'hffffff) | 128'hff02_0000_0000_0000_0000_0001_ff00_0000}
}

/* True if both 'ips' are in the same network as defined by netmask 'mask',
 * false otherwise. */
function same_network(ips: (in6_addr, in6_addr), mask: in6_addr): bool {
    ips.0.network(mask) == ips.1.network(mask)
}

function multicast_to_ethernet(ip6: in6_addr): eth_addr {
    EthAddr{48'h333300000000 | (ip6.aaaa as bit<48> & 48'hffffffff)}
}

function cidr_bits(ip6: in6_addr): Option<bit<8>> {
    if (ip6.is_cidr()) {
        Some{128 - ip6.aaaa.trailing_zeros() as u8}
    } else {
        None
    }
}

function to_string(addr: in6_addr): string { inet6_ntop(addr) }
extern function inet6_ntop(addr: in6_addr): string

/*
 * IPv4 | IPv6 addresses
 */

typedef v46_ip = IPv4 { ipv4: in_addr } | IPv6 { ipv6: in6_addr }

function ip46_parse_cidr(s: string) : Option<(v46_ip, bit<32>)> = {
    match (ip_parse_cidr(s)) {
        Right{(ipv4, plen)} -> return Some{(IPv4{ipv4}, plen)},
        _ -> ()
    };
    match (ipv6_parse_cidr(s)) {
        Right{(ipv6, plen)} -> return Some{(IPv6{ipv6}, plen)},
        _ -> ()
    };
    None
}
function ip46_parse_masked(s: string) : Option<(v46_ip, v46_ip)> = {
    match (ip_parse_masked(s)) {
        Right{(ipv4, mask)} -> return Some{(IPv4{ipv4}, IPv4{mask})},
        _ -> ()
    };
    match (ipv6_parse_masked(s)) {
        Right{(ipv6, mask)} -> return Some{(IPv6{ipv6}, IPv6{mask})},
        _ -> ()
    };
    None
}
function ip46_parse(s: string) : Option<v46_ip> = {
    match (ip_parse(s)) {
        Some{ipv4} -> return Some{IPv4{ipv4}},
        _ -> ()
    };
    match (ipv6_parse(s)) {
        Some{ipv6} -> return Some{IPv6{ipv6}},
        _ -> ()
    };
    None
}
function to_string(ip46: v46_ip) : string = {
    match (ip46) {
        IPv4{ipv4} -> "${ipv4}",
        IPv6{ipv6} -> "${ipv6}"
    }
}
function to_bracketed_string(ip46: v46_ip) : string = {
    match (ip46) {
        IPv4{ipv4} -> "${ipv4}",
        IPv6{ipv6} -> "[${ipv6}]"
    }
}

function network(ip46: v46_ip, plen: bit<32>) : v46_ip {
    match (ip46) {
        IPv4{ipv4} -> IPv4{InAddr{ipv4.a & ip_create_mask(plen).a}},
        IPv6{ipv6} -> IPv6{In6Addr{ipv6.aaaa & ipv6_create_mask(plen).aaaa}}
    }
}

function is_all_ones(ip46: v46_ip) : bool {
    match (ip46) {
        IPv4{ipv4} -> ipv4.is_all_ones(),
        IPv6{ipv6} -> ipv6.is_all_ones()
    }
}

function cidr_bits(ip46: v46_ip) : Option<bit<8>> {
    match (ip46) {
        IPv4{ipv4} -> ipv4.cidr_bits(),
        IPv6{ipv6} -> ipv6.cidr_bits()
    }
}

function ipX(ip46: v46_ip) : string {
    match (ip46) {
        IPv4{_} -> "ip4",
        IPv6{_} -> "ip6"
    }
}

function xxreg(ip46: v46_ip) : string {
    match (ip46) {
        IPv4{_} -> "",
        IPv6{_} -> "xx"
    }
}

/*
 * CIDR-masked IPv4 address
 */

typedef ipv4_netaddr = IPV4NetAddr {
    addr: in_addr,             /* 192.168.10.123 */
    plen: bit<32>              /* CIDR Prefix: 24. */
}

function netmask(na: ipv4_netaddr): in_addr { ip_create_mask(na.plen) }
function bcast(na: ipv4_netaddr): in_addr { na.addr.bcast(na.netmask()) }

/* Returns the network (with the host bits zeroed)
 * or the host (with the network bits zeroed). */
function network(na: ipv4_netaddr): in_addr { na.addr.network(na.netmask()) }
function host(na: ipv4_netaddr): in_addr { na.addr.host(na.netmask()) }

/* Match on the host, if the host part is nonzero, or on the network
 * otherwise. */
function match_host_or_network(na: ipv4_netaddr): string {
    if (na.plen < 32 and na.host().is_zero()) {
        "${na.addr}/${na.plen}"
    } else {
        "${na.addr}"
    }
}

/* Match on the network. */
function match_network(na: ipv4_netaddr): string {
    if (na.plen < 32) {
        "${na.network()}/${na.plen}"
    } else {
        "${na.addr}"
    }
}

/*
 * CIDR-masked IPv6 address
 */

typedef ipv6_netaddr = IPV6NetAddr {
    addr: in6_addr,          /* fc00::1 */
    plen: bit<32>            /* CIDR Prefix: 64 */
}

function netmask(na: ipv6_netaddr): in6_addr { ipv6_create_mask(na.plen) }

/* Returns the network (with the host bits zeroed).
 * or the host (with the network bits zeroed). */
function network(na: ipv6_netaddr): in6_addr { na.addr.network(na.netmask()) }
function host(na: ipv6_netaddr): in6_addr { na.addr.host(na.netmask()) }

function solicited_node(na: ipv6_netaddr): in6_addr { na.addr.solicited_node() }

function is_lla(na: ipv6_netaddr): bool { na.network().is_lla() }

/* Match on the network. */
function match_network(na: ipv6_netaddr): string {
    if (na.plen < 128) {
        "${na.network()}/${na.plen}"
    } else {
        "${na.addr}"
    }
}

/*
 * Set of addresses associated with a logical port.
 *
 * A logical port always has one Ethernet address, plus any number of IPv4 and IPv6 addresses.
 */
typedef lport_addresses = LPortAddress {
    ea: eth_addr,
    ipv4_addrs: Vec<ipv4_netaddr>,
    ipv6_addrs: Vec<ipv6_netaddr>
}

function to_string(addr: lport_addresses): string = {
    var addrs = ["${addr.ea}"];
    for (ip4 in addr.ipv4_addrs) {
        addrs.push("${ip4.addr}")
    };

    for (ip6 in addr.ipv6_addrs) {
        addrs.push("${ip6.addr}")
    };

    string_join(addrs, " ")
}

/*
 * Packet header lengths
 */
function eTH_HEADER_LEN(): integer = 14
function vLAN_HEADER_LEN(): integer = 4
function vLAN_ETH_HEADER_LEN(): integer = eTH_HEADER_LEN() + vLAN_HEADER_LEN()

/*
 * Logging
 */
extern function warn(msg: string): ()
extern function abort(msg: string): ()

/*
 * C functions imported from OVN
 */
extern function is_dynamic_lsp_address(addr: string): bool
extern function extract_lsp_addresses(address: string): Option<lport_addresses>
extern function extract_addresses(address: string): Option<lport_addresses>
extern function extract_lrp_networks(mac: string, networks: Set<string>): Option<lport_addresses>
extern function extract_ip_addresses(address: string): Option<lport_addresses>

extern function split_addresses(addr: string): (Set<string>, Set<string>)

extern function ovn_internal_version(): string

/*
 * C functions imported from OVS
 */
extern function json_string_escape(s: string): string

function json_escape(s: string): string {
    s.json_string_escape()
}
function json_escape(s: istring): string {
    s.ival().json_string_escape()
}

/* For a 'key' of the form "IP:port" or just "IP", returns
 * (v46_ip, port) tuple. */
extern function ip_address_and_port_from_lb_key(k: string): Option<(v46_ip, bit<16>)>
